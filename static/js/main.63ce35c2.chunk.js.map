{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searc-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","length","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","value","target","setState","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCNHC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,qBAAKP,UAAU,YAAf,WACMO,GAAYA,EAASC,OAAS,GAC9BD,EAASE,KAAI,SAAAV,GAAO,OAClB,cAAC,EAAD,CAEEA,QAASA,GADJA,EAAQI,WCNZO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCCG,G,kNAxCbC,MAAQ,CACNT,SAAU,GACVU,YAAa,I,EAWfL,aAAe,SAAAM,GAAM,IACXC,EAAUD,EAAEE,OAAZD,MACR,EAAKE,SAAS,CACZJ,YAAaE,K,uDAXjB,WAAqB,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKL,SAAS,CAC5Bd,SAAUmB,S,oBAWhB,WAAU,IAAD,EAC2BC,KAAKX,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YACZW,EAAmBrB,EAASsB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQK,KAAK0B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CACEL,SAAUqB,W,GApCFI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.63ce35c2.chunk.js","sourcesContent":["\r\nimport './card.styles.css'\r\n\r\nexport const Card = ({ monster }) => (\r\n  <div className=\"card-container\">\r\n    <img \r\n      alt=\"monster\" \r\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} \r\n    />\r\n    <h2>{monster.name}</h2>\r\n    <p>{monster.email}</p>\r\n  </div>\r\n)\r\n","\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = ({ monsters }) => (\r\n  <div className=\"card-list\">\r\n    { !!monsters && monsters.length > 0 && \r\n        monsters.map(monster => (\r\n          <Card \r\n            key={monster.id} \r\n            monster={monster} \r\n          /> \r\n        ))}\r\n  </div>\r\n)\r\n\r\n\r\n\r\n","\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input \r\n    className=\"search\" \r\n    type=\"search\" \r\n    placeholder={placeholder}\r\n    onChange={handleChange} \r\n  />\r\n)","import { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport { SearchBox } from './components/search-box/searc-box.component'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    monsters: [],\r\n    searchField: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then( users => this.setState({\r\n        monsters: users\r\n      }))\r\n  }\r\n\r\n  handleChange = e => {\r\n    const { value } = e.target\r\n    this.setState({\r\n      searchField: value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox \r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList \r\n          monsters={filteredMonsters}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}